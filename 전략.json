{
  "goUp": true,
  "nearHigh": [[250, 1.1, 0.9]],
  "bbwidth": [[5, 0.04]],
  "enoughVol": [[5, 200]],
  "enoughTodayVol": [[5, 4]],
  "noGoUpFor": 5,
  "totalPrice": 100000000,
  "afterPeriod": 29
}

[가격은 종가기준]
-------------------------------------------------------
> 전날 확인 가능한 사항
noGoUpFor [a] : a일간 볼린저밴드 돌파가 일어나지 않았는가?
bbwidth [a,b] : 볼린저밴드 width 가 b이하를 a일만큼 유지하였는가
enoughVol [a,b] : 직전 a일간 거래량이 b이상인가?

> 아래 수식중에서 미리 계산할 수 있는 것들
a일간의 거래량
249일간 최고가 * 1.1 , 0.9
> 그리고 당일의 최고가 * 1.1, 0.9를 기반으로 그중 max를 취해서 비교해야 한다.
-------------------------------------------------------
> 당일 그때 그때 확인해야 하는 사항
goUP : 양봉인지의 유무
nearHigh [a,b,c]] : 250일간 최고가에서 1.1 ~ 0.9 사이에 가격이 유지되고 있는가
enoughTodayVol [a,b] : 오늘의 거래량이 a일간 거래량의 4배 이상인가?
totalPrice [a] : 오늘 거래대금이 1억 이상인가?
당일의 최고가 * 1.1, 0.9
-------------------------------------------------------
afterPeriod [a] : a일 후 매도
-------------------------------------------------------
profit : 기하평균 수익률 
pperday : profit / 1 day, 하루기준 수익률
count : 2000년부터 KOSPI/KOSDAQ 기준 match 횟수
-------------------------------------------------------
> 볼린저밴드 기준 (20일 이평)
pmean = df['price'].rolling(window=20).mean()
pstd = df['price'].rolling(window=20).std()
vhigh = pmean + pstd * 2
vlow = pmean - pstd * 2
vbandwidth = (vhigh - vlow) / pmean

1. 전날 저녁에 candidate list 뽑고, 미리 계산해야 하는 것들 뽑아 놓음 (현재 python web crawling으로 해서 json으로 list)
2. 당일 3시 15분에 candidate list 중에서 최종확정 ()
3. 매수
  - 매수할 금액 결정 (portion 1/2 or 1/3)
  - 호가 보고 결정해서 매수 (가격이 너무 크면 한번에 매수가 안될 수도 있는데, 이런 경우는 시간대를 나누어서 매수?)
  상한가이면 매수하지 않는다.
  3시 15분에 1호가 낮춰서 매수 걸고
  매수 안된 물량이 있으면 15분 매수건 취소하고 그 가격만큼 17분에 현재 호가로 매수
  매수 안된 물량이 있으면 17분 매수건 취소하고 그 가격만큼 19분에 현재 호가로 매수
  그래도 매수 안되면 동시호가 때 매수

4. 매도 
  - 일단 29일 후에 무조건 매도  
  3시 10분에 1호가 높여서 매도 걸고
  매도 안된 물량이 있으면 10분 매도건 취소하고 그 가격만큼 15분에 현재 호가로 매도
  매도 안된 물량이 있으면 15분 매도건 취소하고 그 가격만큼 17분에 현재 호가로 매도
  매도 안된 물량이 있으면 15분 매도건 취소하고 그 가격만큼 19분에 현재 호가로 매도
  그래도 매도 안되면 동시호가 때 매수